variables:
  AWS_SERVICE_CONNECTION_DEV: aws-awsome-dev # Fill in the name of your own service connection here
#  AWS_SERVICE_CONNECTION_STG: <FILLMEIN>
#  AWS_SERVICE_CONNECTION_PRD: <FILLMEIN>

schedules:
  - cron: '0 1 * * 0-4'
    displayName: 'At 01:00 on every day-of-week from Monday through Thursday.'
    branches:
      include:
        - main
    always: true

parameters:
  - name: environments
    displayName: Deployment Environments
    type: object
    default:
      - name: development
        aws_service_connection: aws-awsome-dev
        env: dev
#      - name: staging
#        aws_service_connection: <FILLMEIN>
#        env: stg
#        aws_account_id:
#      - name: production
#        aws_service_connection: <FILLMEIN>
#        env: prd
#        aws_account_id:

trigger:
  branches:
    include:
      - '*'

resources:
  repositories:
    - repository: ns-shared-guard-rules
      type: git
      name: NSCAWS/ns-shared-guard-rules
    - repository: shared-templates
      name: NSPAAS/azure-devops-templates
      type: git
      ref: refs/tags/main_20220921.1

pool:
  vmImage: 'ubuntu-latest'

stages:
  # In case you need to get an AWS account id programmatically in CI, add the
  # stage below to fetch it and set it. Update the `awsCredentials` value to
  # your actual service connection.

  # - stage: Configure
  #   jobs:
  #     - job: Id
  #       displayName: 'Set AWS account id'
  #       steps:         
  #         - task: AWSShellScript@1
  #           inputs:
  #             awsCredentials: aws-awsome-dev
  #             regionName: 'eu-west-1'
  #             scriptType: 'inline'
  #             inlineScript: |
  #               echo "##vso[task.setvariable variable=aws_account_id_dev;isoutput=true]$(aws sts get-caller-identity --query "Account" --output text)"
  #           name: 'config'
  #
  # It can then be accessed in the variables keyword in a job or stage:
  #
  #   variables:
  #     accountId: $[ stageDependencies.Configure.Id.outputs['config.aws_account_id_dev'] ]
  
  - stage: Build
    jobs:
      - job: Audit
        displayName: Audit
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Audit deps
            inputs:
              command: custom
              customCommand: audit --audit-level=high --omit=dev
      - job: Analyze
        displayName: Static Code Analysis
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Lint code
            inputs:
              command: custom
              customCommand: 'run lint'
          - template: steps/test/code-analysis/sonarqube.yml@shared-templates
            parameters:
              serviceConnection: 'CRAWS SonarQube EE P'
              scannerMode: CLI
              configMode: file
              configFile: sonar-project.properties
              pollingTimeoutSec: 600
      - job: Test
        displayName: Unit tests
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Run unit tests
            inputs:
              command: custom
              customCommand: 'run test -- test/unit'
      - job: Synth
        displayName: CDK Synth
        steps:
          - ${{ each environment in parameters.environments }}:
            - task: AWSShellScript@1
              displayName: CDK synth
              inputs:
                awsCredentials: ${{ environment.aws_service_connection }}
                regionName: 'eu-west-1'
                scriptType: 'inline'
                inlineScript: |
                  npm ci
                  npx cdk synth --ci -c config=${{ environment.env }} -c genericConfig=generic -c Repository=$(Build.Repository.Name) -c Pipeline=$(Build.DefinitionName) --all --require-approval never
                displayName: 'Synth development environment'
                # https://github.com/aws/aws-cdk/issues/5552
                failOnStandardError: false # Fails when set to true, even on successful synth? 
            # condition: and(always(), ne(variables['Build.Reason'], 'Schedule'))

  - stage: Test
    # explicit no deps to run stage in parallel with build
    dependsOn: []
    jobs:
      - job: Test
        displayName: Integration Tests
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Run integration tests
            inputs:
              command: custom
              customCommand: 'run test -- test/integration'
          # https://marketplace.visualstudio.com/items?itemName=ms-vscs-rm.vss-services-servicenowchangerequestmanagement
          # More steps can be added here e.g. load testing

  # Optionally add a Release stage if you actually release some product, like a package.
  # - stage: Release
  #   dependsOn:
  #     - Build
  #     - Test
  #   jobs:
  #   - job: < e.g. versioning, generate release notes>

  - ${{ each environment in parameters.environments }}:
    - stage: Deploy_${{ environment.name }}
      dependsOn:
        - Build
        - Test
      jobs:
        - deployment: Deploy
          environment: ${{ environment.name }}
          displayName: CDK Deploy
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                  - task: AWSShellScript@1
                    inputs:
                      awsCredentials: ${{ environment.aws_service_connection }}
                      regionName: 'eu-west-1'
                      scriptType: 'inline'
                      inlineScript: |
                        npm ci
                        npx cdk deploy --ci -c config=${{ environment.env }} -c genericConfig=generic -c Repository=$(Build.Repository.Name) -c Pipeline=$(Build.DefinitionName) --all --require-approval never
                      displayName: 'Deploy ${{ environment.env }} environment'
                      failOnStandardError: false # Fails when set to true, even on successful deploy?
