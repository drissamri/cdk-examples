variables:
  AWS_SERVICE_CONNECTION_DEV: aws-awsome-sbx # <<Fill in the name of your own service connection here>>

parameters:
  - name: environments
    displayName: Deployment Environments
    type: object
    default:
      - name: development
        aws_service_connection: aws-awsome-dev
        env: dev

trigger:
  branches:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      name: NSPAAS/azure-devops-templates
      type: git
      ref: master
    - repository: ns-shared-guard-rules
      type: git
      name: NSCAWS/ns-shared-guard-rules
    - repository: shared-templates
      name: NSPAAS/azure-devops-templates
      type: git
      ref: refs/tags/main_20220921.1

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      - job: Audit
        displayName: Audit
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Audit deps
            inputs:
              command: custom
              customCommand: audit --audit-level=high --omit=dev

      - job: Analyze
        displayName: Static Code Analysis
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci

          - task: Npm@1
            displayName: Lint code
            inputs:
              command: custom
              customCommand: 'run lint'

          - template: steps/test/code-analysis/sonarqube.yml@shared-templates
            parameters:
              serviceConnection: 'CRAWS SonarQube EE P'
              scannerMode: CLI
              configMode: file
              configFile: sonar-project.properties
              pollingTimeoutSec: 600

      - job: Test
        displayName: Unit tests
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Run unit tests
            inputs:
              command: custom
              customCommand: 'run test -- test/unit'

      - job: Synth
        displayName: CDK Synth
        dependsOn: Gradle
        steps:
          - ${{ each environment in parameters.environments }}:
              - task: AWSShellScript@1
                displayName: CDK synth
                inputs:
                  awsCredentials: ${{ environment.aws_service_connection }}
                  regionName: 'eu-west-1'
                  scriptType: 'inline'
                  inlineScript: |
                    npm ci
                    npx cdk synth --ci -c config=${{ environment.env }} -c genericConfig=generic -c Repository=$(Build.Repository.Name) -c Pipeline=$(Build.DefinitionName) -o cdk.out.${{ environment.env }} --all --require-approval never
                  displayName: 'Synth development environment'
                  # https://github.com/aws/aws-cdk/issues/5552
                  failOnStandardError: false # Fails when set to true, even on successful synth?
              - task: PublishPipelineArtifact@1
                inputs:
                  targetPath: cdk.out.${{ environment.env }}
                  artifactName: CDKOut${{ environment.env }}

  - stage: Test
    # explicit no deps to run stage in parallel with build
    dependsOn: []
    jobs:
      - job: Test
        displayName: Integration Tests
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
          - task: Npm@1
            displayName: Run integration tests
            inputs:
              command: custom
              customCommand: 'run test -- test/integration'
          # More steps can be added here e.g. load testing

  - ${{ each environment in parameters.environments }}:
      - stage: Deploy_${{ environment.name }}
        dependsOn:
          - Build
          - Test
        jobs:
          - deployment: Deploy
            environment: ${{ environment.name }}
            displayName: CDK Deploy
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                    - task: DownloadPipelineArtifact@2
                      inputs:
                        artifact: CDKOut${{ environment.env }}
                        path: '$(System.DefaultWorkingDirectory)/cdk.out.${{ environment.env }}'
                    - task: AWSShellScript@1
                      inputs:
                        awsCredentials: ${{ environment.aws_service_connection }}
                        regionName: 'eu-west-1'
                        scriptType: 'inline'
                        inlineScript: |
                          npm ci
                          npx cdk deploy --ci -c config=${{ environment.env }} -c genericConfig=generic -c Repository=$(Build.Repository.Name) -c Pipeline=$(Build.DefinitionName) -o cdk.out.${{ environment.env }} --all --require-approval never
                        displayName: 'Deploy ${{ environment.env }} environment'
                        failOnStandardError: false # Fails when set to true, even on successful deploy?
