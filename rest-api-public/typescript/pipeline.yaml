variables:
  NPM_NEXUS_SERVICE_CONNECTION: ns-npm-nexus
  NPM_WORKING_DIR: 'rest-api-public/typescript'
  AWS_SERVICE_CONNECTION_DEV: aws-awsome-dev # Fill in the name of your own service connection here
  AWS_SERVICE_CONNECTION_STG: <FILLMEIN>
  AWS_SERVICE_CONNECTION_PRD: <FILLMEIN>

parameters:
  - name: environments
    displayName: Deployment Environments
    type: object
    default:
      - name: development
        aws_service_connection: aws-awsome-dev
        env: dev

trigger:
  branches:
    include:
      - '*'

resources:
  repositories:
    - repository: ns-shared-guard-rules
      type: git
      name: NSCAWS/ns-shared-guard-rules
    - repository: shared-templates
      name: NSPAAS/azure-devops-templates
      type: git
      ref: refs/tags/main_20220921.1

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      - job: Audit
        displayName: Audit
        steps:
          - task: Npm@1
            displayName: npm ci
            inputs:
              command: ci
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)
          - task: Npm@1
            displayName: npm audit
            inputs:
              command: custom
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customCommand: audit --audit-level=high --omit=dev
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)

      - job: Analyze
        displayName: Static Code Analysis
        steps:
          - task: Npm@1
            displayName: npm ci
            inputs:
              command: ci
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)
          - task: Npm@1
            displayName: linting
            inputs:
              command: custom
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customCommand: 'run lint'
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)
          - template: steps/test/code-analysis/sonarqube.yml@shared-templates
            parameters:
              serviceConnection: 'CRAWS SonarQube EE P'
              scannerMode: CLI
              configMode: file
              configFile: ${{ variables.NPM_WORKING_DIR }}/sonar-project.properties
              pollingTimeoutSec: 600

      - job: Test
        displayName: Unit tests
        steps:
          - task: Npm@1
            displayName: npm ci
            inputs:
              command: ci
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)
          - task: Npm@1
            displayName: Unit tests
            inputs:
              command: custom
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customCommand: 'run test -- test/unit'
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)

      - job: Synth
        displayName: cdk synth
        steps:
          - ${{ each environment in parameters.environments }}:
            - task: Npm@1
              displayName: npm ci
              inputs:
                command: ci
                workingDir: ${{ variables.NPM_WORKING_DIR }}
                customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)

            - task: AWSShellScript@1
              displayName: cdk synth
              inputs:
                awsCredentials: ${{ environment.aws_service_connection }}
                regionName: 'eu-west-1'
                scriptType: 'inline'
                inlineScript: |
                  cd ${{ variables.NPM_WORKING_DIR }}
                  npx cdk synth --ci -c config=${{ environment.env }} -c genericConfig=generic -c Repository=$(Build.Repository.Name) -c Pipeline=$(Build.DefinitionName) --all --require-approval never
                displayName: 'Synth development environment'
                # https://github.com/aws/aws-cdk/issues/5552
                failOnStandardError: false # Fails when set to true, even on successful synth? 
            # condition: and(always(), ne(variables['Build.Reason'], 'Schedule'))

  - stage: Test
    # explicit no deps to run stage in parallel with build
    dependsOn: []
    jobs:
      - job: Test
        displayName: Integration Tests
        steps:
          - task: Npm@1
            displayName: Install deps
            inputs:
              command: ci
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)
          - task: Npm@1
            displayName: Run integration tests
            inputs:
              command: custom
              workingDir: ${{ variables.NPM_WORKING_DIR }}
              customCommand: 'run test -- test/integration'
              customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)

  - ${{ each environment in parameters.environments }}:
    - stage: Deploy_${{ environment.name }}
      dependsOn:
        - Build
        - Test
      jobs:
        - deployment: Deploy
          environment: ${{ environment.name }}
          displayName: CDK Deploy
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                  - task: Npm@1
                    displayName: npm ci
                    inputs:
                      command: ci
                      workingDir: ${{ variables.NPM_WORKING_DIR }}
                      customEndpoint: $(NPM_NEXUS_SERVICE_CONNECTION)

                  - task: AWSShellScript@1
                    inputs:
                      awsCredentials: ${{ environment.aws_service_connection }}
                      regionName: 'eu-west-1'
                      scriptType: 'inline'
                      inlineScript: |
                        cd ${{ variables.NPM_WORKING_DIR }}
                        npx cdk deploy --ci -c config=${{ environment.env }} -c genericConfig=generic -c Repository=$(Build.Repository.Name) -c Pipeline=$(Build.DefinitionName) --all --require-approval never
                      displayName: 'Deploy ${{ environment.env }} environment'
                      failOnStandardError: false # Fails when set to true, even on successful deploy?